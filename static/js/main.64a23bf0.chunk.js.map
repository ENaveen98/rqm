{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuoteBox","props","state","listQuotes","listAuthor","randomNumber","Math","floor","random","newQuote","bind","this","setState","styles1","styles2","id","className","style","onClick","href","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,kC,qJCYrCC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,CACV,qCACA,8HACA,0JACA,yHACA,iJACA,uFACA,mGACA,wDACA,yIACA,uEAEFC,WAAY,CACV,sBACA,oBACA,oBACA,sBACA,qBACA,2BACA,wBACA,yBACA,wBACA,6BAEFC,aAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,WAEhC,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBA7BC,E,uDAiCjBC,KAAKC,UAAS,SAACV,GAAD,MAAY,CACxBG,aAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,gB,+BAKhC,IAcMK,EAAU,CACd,mBAfkB,CAClB,YACA,aACA,aACA,YACA,wBAUgCF,KAAKT,MAAMG,aAAe,IAEtDS,EAAU,CACd,mBAXsB,CACtB,WACA,YACA,QACA,OACA,mBAMoCH,KAAKT,MAAMG,aAAe,IAEhE,OACE,yBAAKU,GAAG,YAAYC,UAAU,aAAaC,MAAOJ,GAChD,6BACE,yBAAKE,GAAG,OAAOC,UAAU,WAAWC,MAAOH,GACxCH,KAAKT,MAAMC,WAAWQ,KAAKT,MAAMG,eAEpC,yBAAKU,GAAG,SAASC,UAAU,aAAaC,MAAOH,GAC5CH,KAAKT,MAAME,WAAWO,KAAKT,MAAMG,eAEpC,yBAAKU,GAAG,gBAAgBC,UAAU,aAAaC,MAAOH,GACpD,4BACEC,GAAG,YACHG,QAASP,KAAKF,SACdO,UAAU,iBAHZ,oBAQF,uBACED,GAAG,cACHI,KAAK,2BACLH,UAAU,gBAHZ,6B,GA9EaI,IAAMC,WA2FdC,EAnGf,WACE,OACE,8BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64a23bf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <body>\n      <QuoteBox />\n    </body>\n  );\n}\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listQuotes: [\n        \"Get busy living or get busy dying.\",\n        \"The first step toward success is taken when you refuse to be a captive of the environment in which you first find yourself.\",\n        \"When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us.\",\n        \"Twenty years from now you will be more disappointed by the things that you didn’t do than by the ones you did do.\",\n        \"When I dare to be powerful – to use my strength in the service of my vision, then it becomes less and less important whether I am afraid.\",\n        \"Great minds discuss ideas; average minds discuss events; small minds discuss people.\",\n        \"A successful man is one who can lay a firm foundation with the bricks others have thrown at him.\",\n        \"Those who dare to fail miserably can achieve greatly.\",\n        \"I can’t give you a sure-fire formula for success, but I can give you a formula for failure: try to please everybody all the time.\",\n        \"It is hard to fail, but it is worse never to have tried to succeed.\",\n      ],\n      listAuthor: [\n        \"– Stephen King\",\n        \"– Mark Caine\",\n        \"– Mark Twain\",\n        \"– Helen Keller\",\n        \"– Audre Lorde\",\n        \"– Eleanor Roosevelt\",\n        \"– David Brinkley\",\n        \"– John F. Kennedy\",\n        \"-Herbert Bayard Swope\",\n        \"– Theodore Roosevelt\",\n      ],\n      randomNumber: Math.floor(Math.random() * 10),\n    };\n    this.newQuote = this.newQuote.bind(this);\n  }\n\n  newQuote() {\n    this.setState((state) => ({\n      randomNumber: Math.floor(Math.random() * 10),\n    }));\n  }\n\n  render() {\n    const randomColor = [\n      \"lightblue\",\n      \"lightgreen\",\n      \"lightcoral\",\n      \"lightpink\",\n      \"lightgoldenrodyellow\",\n    ];\n    const randomColorDark = [\n      \"darkblue\",\n      \"darkgreen\",\n      \"coral\",\n      \"pink\",\n      \"goldenrodyellow\",\n    ];\n    const styles1 = {\n      \"background-color\": randomColor[this.state.randomNumber % 5],\n    };\n    const styles2 = {\n      \"background-color\": randomColorDark[this.state.randomNumber % 5],\n    };\n    return (\n      <div id=\"quote-box\" className=\"entire-box\" style={styles1}>\n        <div>\n          <div id=\"text\" className=\"text-div\" style={styles2}>\n            {this.state.listQuotes[this.state.randomNumber]}\n          </div>\n          <div id=\"author\" className=\"author-div\" style={styles2}>\n            {this.state.listAuthor[this.state.randomNumber]}\n          </div>\n          <div id=\"new-quote-div\" className=\"submit-div\" style={styles2}>\n            <button\n              id=\"new-quote\"\n              onClick={this.newQuote}\n              className=\"submit-button\"\n            >\n              Click to change\n            </button>\n          </div>\n          <a\n            id=\"tweet-quote\"\n            href=\"twitter.com/intent/tweet\"\n            className=\"tweet-anchor\"\n          >\n            click here to tweet\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}